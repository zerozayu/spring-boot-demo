package com.zhangyu.springcloudstreamdemo;

import com.zhangyu.springcloudstreamdemo.binder.MyPipe;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.messaging.handler.annotation.SendTo;


// Generated by https://start.springboot.io
// 优质的 spring/boot/data/security/cloud 框架中文文档尽在 => https://springdoc.cn

@SpringBootApplication
// @EnableBinding(LogStreamBinder.class) // 开启LogStreamBinder的binding(绑定),这样做会向框架发出信号，以启动与消息传递中间件的绑定，并自动创建绑定到Sink.INPUT通道的目标（即queue，topic和其他）
@EnableBinding({Processor.class, MyPipe.class})// stream 自带三个接口:Processor,Sink,Processor,也可以自定义
 public class SpringcloudStreamDemoApplication {

    private Logger logger = LoggerFactory.getLogger(SpringcloudStreamDemoApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(SpringcloudStreamDemoApplication.class, args);
    }

    @StreamListener(Processor.INPUT)
    @SendTo(Processor.OUTPUT) // 通过SendTo注解将方法内返回值转发到其他消息通道中
    public String handle(String value) {
        logger.info("接收到消息: " + value);
        return value.toUpperCase();
    }

    @StreamListener(MyPipe.INPUT)
    public void handle1(String value) {
        logger.info("MyPipe 接收到消息: " + value);
    }


    // @StreamListener(LogStreamBinder.DB_CONFIG_TOPIC)
    // public void changeDbConfig(Object dbConfigDTOJson) {
    //     logger.info("接收到消息: " + dbConfigDTOJson);
    // }
}
